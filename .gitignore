# Created by https://www.toptal.com/developers/gitignore/api/windows,linux,macos,c,c++,python,opencv,qt
# Edit at https://www.toptal.com/developers/gitignore?templates=windows,linux,macos,c,c++,python,opencv,qt

### C ###
# Prerequisites
*.d

# Object files
*.o
*.ko
*.obj
*.elf

# Linker output
*.ilk
*.map
*.exp

# Precompiled Headers
*.gch
*.pch

# Libraries
*.lib
*.a
*.la
*.lo

# Shared objects (inc. Windows DLLs)
*.dll
*.so
*.so.*
*.dylib

# Executables
*.exe
*.out
*.app
*.i*86
*.x86_64
*.hex

# Debug files
*.dSYM/
*.su
*.idb
*.pdb

# Kernel Module Compile Results
*.mod*
*.cmd
.tmp_versions/
modules.order
Module.symvers
Mkfile.old
dkms.conf

### C++ ###
# Prerequisites

# Compiled Object files
*.slo

# Precompiled Headers

# Compiled Dynamic libraries

# Fortran module files
*.mod
*.smod

# Compiled Static libraries
*.lai

# Executables

### Linux ###
*~

# temporary files which can be created if a process still has a handle open of a deleted file
.fuse_hidden*

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*

# .nfs files are created when an open file is removed but is still being accessed
.nfs*

### macOS ###
# General
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon


# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

### macOS Patch ###
# iCloud generated files
*.icloud

### OpenCV ###
#OpenCV for Mac and Linux
#build and release folders
*/CMakeFiles
*/CMakeCache.txt
*/Makefile
*/cmake_install.cmake

### Python ###
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

### Python Patch ###
# Poetry local configuration file - https://python-poetry.org/docs/configuration/#local-configuration
poetry.toml

# ruff
.ruff_cache/

# LSP config files
pyrightconfig.json

### Qt ###
# C++ objects and libs

# Qt-es
object_script.*.Release
object_script.*.Debug
*_plugin_import.cpp
/.qmake.cache
/.qmake.stash
*.pro.user
*.pro.user.*
*.qbs.user
*.qbs.user.*
*.moc
moc_*.cpp
moc_*.h
qrc_*.cpp
ui_*.h
*.qmlc
*.jsc
Makefile*
*build-*
*.qm
*.prl

# Qt unit tests
target_wrapper.*

# QtCreator
*.autosave

# QtCreator Qml
*.qmlproject.user
*.qmlproject.user.*

# QtCreator CMake
CMakeLists.txt.user*

# QtCreator 4.8< compilation database
compile_commands.json

# QtCreator local machine specific files for imported projects
*creator.user*

*_qmlcache.qrc

### Windows ###
# Windows thumbnail cache files
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db

# Dump file
*.stackdump

# Folder config file
[Dd]esktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msix
*.msm
*.msp

# Windows shortcuts
*.lnk

# End of https://www.toptal.com/developers/gitignore/api/windows,linux,macos,c,c++,python,opencv,qt

### STM32CubeIDE / STM32CubeMX (Eclipse-based) ###
# IDE/워크스페이스 메타
.project
.cproject
.settings/
.stm32cubeide/
.externalToolBuilders/
*.launch

# MX/IDE 보조 파일(빌드/세션용)
*.mxproject
*.log

# 빌드 디렉터리(일반적으로 생성됨)
Debug/
Release/
build/
out/
.dep/
.ipch/
*.map

# 주의: 프로젝트 설정 파일은 추적 권장
#!*.ioc


### U-Boot ###
# 최상위 산출물
/u-boot
/u-boot.bin
/u-boot.map
/u-boot.srec
/u-boot.img
/u-boot-nodtb.bin
/u-boot.dtb
/u-boot.lds
/SPL
/MLO

# 보드별/툴체인 산출물(폴더명 예시)
build-uboot*/
uboot-build*/
u-boot-*/     # 압축 해제 소스 트리 혹은 빌드 산출물 트리


### Yocto / BitBake ###
# 대용량/캐시/임시물 (필수 제외 권장)
tmp/
sstate-cache/
downloads/
cache/
buildhistory/
toaster.sqlite*
toaster_logs/
bitbake-cookerdaemon.log
*.lock

# 산출 이미지(포맷 다양)
/*.wic
/*.wic.xz
/*.sdimg
/*.bmap
/*.ext[234]
/*.tar.bz2
/*.tar.xz
/*.rootfs.*
/*.manifest

# 흔한 빌드 디렉터리 네이밍(레포 내로 둘 때)
/build*/
yocto-build*/
poky-build*/

# 로컬 설정은 팀 정책에 따라: 보통 예시는 추적, 실제 값은 제외 권장
#conf/local.conf
#conf/bblayers.conf


### Arduino ###
# IDE 2.x 메타/캐시
.arduinoIDE/
# 빌드 중간 산출물
*.ino.cpp
*.elf
*.hex
*.bin
*.eep
*.lst
# 스케치별 임시 빌드 폴더(직접 생성 시)
arduino-build*/
.sketch/

# (PlatformIO는 별도 .gitignore 권장. 사용 중이면 .pio/ 등을 추가)


### Cross-toolchain / CMake 보강 ###
# 크로스 컴파일러 캐시/툴 설정
.ccls-cache/
.clangd/
compile_commands.json

# CMake 생성물(개별 하위 빌드 디렉터리용)
CMakeCache.txt
CMakeFiles/
cmake-build-*/


# ROS 2 colcon build outputs
/turtlebot3_ws/build/
/turtlebot3_ws/install/
/turtlebot3_ws/log/
/ros2_ws/build/
/ros2_ws/install/
/ros2_ws/log/
